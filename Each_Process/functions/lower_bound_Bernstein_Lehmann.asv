function lower_bounds = lower_bound_Bernstein_Lehman(tri_intval)
    
    llams = calc_eigen_bounds_cr(tri_intval,32);
    nu = llams(4);
    eig_m = 3;
    
    % Import Symbolic Math Toolbox
    syms x y a b
    af = mid(tri_intval(5)); bf=mid(tri_intval(6));
    a_intval = tri_intval(5); b_intval=tri_intval(6);

    % Degree of Bernstein polynomials
    n = 4;  % Adjust the degree here
    
    % Define the Bernstein basis functions
    L1 = (b*x - a*y);
    L2 = y;
    L3 = (1-a)*y + b*(x-a) - b*(1-a);
    bernstein_basis = sym(zeros(1, nchoosek(n, 2)));
    index = 1;
    for i = 1:n
        for j = 1:(n-i)
            k = n - i - j+1;
            bernstein_basis(index) = factorial(n) / (factorial(i) * factorial(j) * factorial(k)) * L1^i * L2^j * L3^k;
            index = index + 1;
        end
    end

    % Initialize mass matrix M and stiffness matrix K
    nBasis = length(bernstein_basis);
    M = sym(zeros(nBasis, nBasis));
    K = sym(zeros(nBasis, nBasis));

    % Compute mass matrix and stiffness matrix symbolically
    for i = 1:nBasis
        for j = 1:nBasis
            Ni = bernstein_basis(i);
            Nj = bernstein_basis(j);

            % Compute mass matrix
            % M(i,j) = ∫∫_Ω (N_i * N_j) dΩ
            M(i,j) = int(int(Ni * Nj, x, (a*y)/b, (-1+a)*(y-b)/b+a), y, 0, b);

            % Compute stiffness matrix
            % K(i,j) = ∫∫_Ω (∇N_i ⋅ ∇N_j) dΩ
            dNi_dx = diff(Ni, x);
            dNi_dy = diff(Ni, y);
            dNj_dx = diff(Nj, x);
            dNj_dy = diff(Nj, y);

            K(i,j) = int(int((dNi_dx * dNj_dx + dNi_dy * dNj_dy), x, (a*y)/b, (-1+a)*(y-b)/b+a), y, 0, b);
        end
    end

    % Substitute numerical values of the vertices into symbolic matrices
    M_numeric = double(subs(subs(M, a, af), b, bf));
    K_numeric = double(subs(subs(K, a, af), b, bf));

    % Solve eigenvalue problem and sort eigenvalues
    [eigenVectors, eigenValues] = eig(K_numeric, M_numeric);
    eigenValues = diag(eigenValues);
    [eigenValues, sortIdx] = sort(eigenValues);
    eigenVectors = eigenVectors(:, sortIdx);

    A1 = sym(zeros(nBasis, nBasis));
    A2 = K;
    A3 = sym(zeros(nBasis, nBasis));
    vs = sym(zeros(eig_m));

    for i = 1:eig_m
        for j = 1:nBasis
            vs(i) = vs(j,i) + eigenVectors(j,i)*bernstein_basis(j);
        end
    end

    for i = 1:eig_m
        for j = 1:eig_m
            Ni = vs(i);
            Nj = bernstein_basis(j);
            dNi_dx = diff(Ni, x);
            dNi_dy = diff(Ni, y);
            dNj_dx = diff(Nj, x);
            dNj_dy = diff(Nj, y);

            lap_Ni = diff(dNi_dx, x)+diff(dNi_dy, y);
            lap_Nj = diff(dNj_dx, x)+diff(dNj_dy, y);

            A1(i,j) = int(int(-lap_Ni * Nj, x, (a*y)/b, (-1+a)*(y-b)/b+a), y, 0, b);
            A3(i,j) = int(int((lap_Ni * lap_Nj), x, (a*y)/b, (-1+a)*(y-b)/b+a), y, 0, b);
        end
    end
    A1=matlabFunction(A1);
    A2=matlabFunction(A2);
    A3=matlabFunction(A3);
    
    A1_intval = A1(a_intval,b_intval);
    A2_intval = A2(a_intval,b_intval);
    A3_intval = A3(a_intval,b_intval);

    B1 = A1_intval-nu*A2_intval;
    B2 = A3_intval-2*nu*A1_intval+nu^2*A2_intval;

    B1=(B1+B1')/2; B2=(B2+B2')/2;

    mus=veig(B1,B2,1:eig_m);
    lower_bounds=nu+1./mus(end:-1:1);
end
